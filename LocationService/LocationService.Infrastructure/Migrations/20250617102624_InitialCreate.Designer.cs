// <auto-generated />
using System;
using LocationService.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LocationService.Infrastructure.Migrations
{
    [DbContext(typeof(LocationDbContext))]
    [Migration("20250617102624_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LocationService.Domain.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<double>("Latitude")
                        .HasPrecision(10, 8)
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasPrecision(11, 8)
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .HasDatabaseName("idx_location_address");

                    b.HasIndex("Latitude", "Longitude")
                        .HasDatabaseName("idx_location_coordinates");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("LocationService.Domain.LocationDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("property_name");

                    b.Property<string>("PropertyValue")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("property_value");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("PropertyName")
                        .HasDatabaseName("idx_location_detail_property_name");

                    b.HasIndex("PropertyName", "PropertyValue")
                        .HasDatabaseName("idx_location_detail_name_value");

                    b.ToTable("location_details", (string)null);
                });

            modelBuilder.Entity("LocationService.Domain.LocationDetail", b =>
                {
                    b.HasOne("LocationService.Domain.Location", "Location")
                        .WithMany("Details")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("LocationService.Domain.Location", b =>
                {
                    b.Navigation("Details");
                });
#pragma warning restore 612, 618
        }
    }
}
